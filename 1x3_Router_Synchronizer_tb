module router_sync(clk,rstn,detect_add,data_in,write_enb_reg,read_enb_0,read_enb_1,read_enb_2,full_0,full_1,full_2,empty_0,empty_1,empty_2,soft_reset_0,soft_reset_1,soft_reset_2,write_enb,fifo_full,valid_out_0,valid_out_1,valid_out_2);

input clk,rstn,detect_add,write_enb_reg,read_enb_0,read_enb_1,read_enb_2,full_0,full_1,full_2,empty_0,empty_1,empty_2;
input [1:0]data_in;
output reg soft_reset_0,soft_reset_1,soft_reset_2,fifo_full;
output valid_out_0,valid_out_1,valid_out_2;
output reg [2:0]write_enb;
reg [1:0]fifo_addr;
reg [4:0]fifo_0_count_sft_reg;
reg [4:0]fifo_1_count_sft_reg;
reg [4:0]fifo_2_count_sft_reg;

//capture add
//

always@(posedge clk)
begin
	if(!rstn)
		fifo_addr<=0;
	else if(detect_add)
		fifo_addr<=data_in;
$display("%b",valid_out_0);
end
//write enb reg for fifo

always@(*)
begin
	if(write_enb_reg)
	begin
		case(fifo_addr)
			2'b00: write_enb<=3'b001;
			2'b01: write_enb<=3'b010;
			2'b10: write_enb<=3'b100;
			default: write_enb<=3'b000;
		endcase
	end
	else
		 write_enb<=3'b000;
 end

 //fifo_full
 

 always@(*)
 begin
	 case(fifo_addr)
		 2'b00:fifo_full<=full_0;
		 2'b01:fifo_full<=full_1;
		 2'b10:fifo_full<=full_2;
		 default:fifo_full<=0;
	 endcase
 end
//VALID OUT

assign valid_out_0=(!empty_0);
assign valid_out_1=(!empty_1);
assign valid_out_2=(!empty_2);

always@(posedge clk)
begin
	if(!rstn)
	begin
		soft_reset_0<=0;
		fifo_0_count_sft_reg<=0;
	end
	else if(!valid_out_0)
	begin
		soft_reset_0<=0;
		fifo_0_count_sft_reg<=0;
	end
	else if(read_enb_0)
		begin
		soft_reset_0<=0;
		fifo_0_count_sft_reg<=0;
	end
	else if(fifo_0_count_sft_reg== 5'd29)
	begin
		soft_reset_0<=1;
		fifo_0_count_sft_reg<=0;
	end
	else
		fifo_0_count_sft_reg<=fifo_0_count_sft_reg+1'b1;
end
always@(posedge clk)
begin
	if(!rstn)
	begin
		soft_reset_1<=0;
		fifo_1_count_sft_reg<=0;;
	end
	else if(!valid_out_1)
		soft_reset_1<=0;
	else if(read_enb_1)
		soft_reset_1<=0;
	else if(fifo_1_count_sft_reg== 5'd29)
	begin
		soft_reset_1<=1;
		fifo_1_count_sft_reg<=0;
	end
	else
		fifo_1_count_sft_reg<=fifo_1_count_sft_reg+1'b1;
end
always@(posedge clk)
begin
	if(!rstn)
	begin
		soft_reset_2<=0;
		fifo_2_count_sft_reg<=0;;
	end
	else if(!valid_out_2)
		soft_reset_2<=0;
	else if(read_enb_2)
		soft_reset_2<=0;
	else if(fifo_2_count_sft_reg== 5'd29)
	begin
		soft_reset_2<=1;
		fifo_2_count_sft_reg<=0;
	end
	else
		fifo_2_count_sft_reg<=fifo_2_count_sft_reg+1'b1;
end
endmodule
