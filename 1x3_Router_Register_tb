module router_reg(clk,rstn,pkt_valid,data_in,fifo_full,rst_int_reg,detect_add,ld_state,laf_state,full_state,lfd_state,parity_done,low_pkt_valid,err,dout);


input clk,rstn,pkt_valid,fifo_full,rst_int_reg,detect_add,ld_state,laf_state,full_state,lfd_state;
input [7:0]data_in;
output reg parity_done,low_pkt_valid,err;
output reg[7:0]dout;
reg [7:0]header,internal_parity,packet_parity,fifo_full_byte;

//header logic

always@(posedge clk)
begin
	if(!rstn)
		header<=0;
	else 
	begin
		if(detect_add && pkt_valid && data_in[1:0] != 2'b11)
			header<=data_in;
		else
			header<=header;
	end
end

//
//
//register full 
//


always@(posedge clk)
begin
	if(!rstn)
		internal_parity<=0;
	else
	begin
		if(detect_add)
			internal_parity<=0;
		else if(lfd_state)
		begin
			internal_parity<=internal_parity^header;
			$display("i=%d",internal_parity);
			end
		else if(pkt_valid && ld_state && !full_state)
			internal_parity<=internal_parity^data_in;
		else
			internal_parity<=internal_parity;
	end
	
end

always@(posedge clk)
begin
	if(!rstn)
		packet_parity<=0;
	else
	begin
		if(detect_add)
			packet_parity<=0;
		else if(ld_state && !pkt_valid)
				packet_parity<=data_in;
		else
				packet_parity<=packet_parity;
	end
end

always@(posedge clk)
begin
	if(!rstn)
		dout<=0;
	else
	begin
		if(detect_add && pkt_valid && data_in && data_in[1:0] != 2'b11)
			dout<=0;
		else if(lfd_state)
			dout<=header;
		else if(ld_state && !fifo_full)
			dout<=data_in;
		else if(ld_state && fifo_full)
			dout<=dout;
		else if(laf_state)
			dout<=fifo_full_byte;
		else 
			dout<=fifo_full_byte;
	end
end

always@(posedge clk)
begin
	if(!rstn)
		fifo_full_byte<=0;
	else
		fifo_full_byte<=data_in;
end
always@(posedge clk)
begin
	if(!rstn)
		low_pkt_valid<=0;
	else if(pkt_valid==0 && ld_state)
		low_pkt_valid<=1;
	else if (rst_int_reg)
		low_pkt_valid<=0;
	else
		low_pkt_valid<=0;
end
always@(posedge clk)
begin
	if(!rstn)
		parity_done<=0;
	else if(detect_add)
		parity_done<=0;
	else if(ld_state && !fifo_full && !pkt_valid)
		parity_done<=1;
	else if(laf_state && low_pkt_valid && !parity_done)
		parity_done<=1;
	else
		parity_done<=0;
end

always@(posedge clk)
begin
	if(!rstn)
		err<=0;
	else 
	begin
		if(parity_done)
		begin
			if(internal_parity == packet_parity)
				err<=0;
			else
				err<=1;
		end
		else
			err<=0;
	end
end

endmodule
